/*
 * generated by Xtext 2.20.0
 */
package org.mdse.minisql.types.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MSQLTypesGrammarAccess extends AbstractGrammarElementFinder {
	
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.types.MSQLTypes.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	IntegerType | StringType | BooleanType;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerType | StringType | BooleanType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerType
		public RuleCall getIntegerTypeParserRuleCall_0() { return cIntegerTypeParserRuleCall_0; }
		
		//StringType
		public RuleCall getStringTypeParserRuleCall_1() { return cStringTypeParserRuleCall_1; }
		
		//BooleanType
		public RuleCall getBooleanTypeParserRuleCall_2() { return cBooleanTypeParserRuleCall_2; }
	}
	public class IntegerTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.types.MSQLTypes.IntegerType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIntegerTypeAction_1 = (Action)cGroup.eContents().get(1);
		
		//IntegerType:
		//	"Int" {IntegerType};
		@Override public ParserRule getRule() { return rule; }
		
		//"Int" {IntegerType}
		public Group getGroup() { return cGroup; }
		
		//"Int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//{IntegerType}
		public Action getIntegerTypeAction_1() { return cIntegerTypeAction_1; }
	}
	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.types.MSQLTypes.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cStringTypeAction_1 = (Action)cGroup.eContents().get(1);
		
		//StringType:
		//	"String" {StringType};
		@Override public ParserRule getRule() { return rule; }
		
		//"String" {StringType}
		public Group getGroup() { return cGroup; }
		
		//"String"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//{StringType}
		public Action getStringTypeAction_1() { return cStringTypeAction_1; }
	}
	public class BooleanTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.minisql.types.MSQLTypes.BooleanType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBoolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBooleanTypeAction_1 = (Action)cGroup.eContents().get(1);
		
		//BooleanType:
		//	"Bool" {BooleanType};
		@Override public ParserRule getRule() { return rule; }
		
		//"Bool" {BooleanType}
		public Group getGroup() { return cGroup; }
		
		//"Bool"
		public Keyword getBoolKeyword_0() { return cBoolKeyword_0; }
		
		//{BooleanType}
		public Action getBooleanTypeAction_1() { return cBooleanTypeAction_1; }
	}
	
	
	private final TypeElements pType;
	private final IntegerTypeElements pIntegerType;
	private final StringTypeElements pStringType;
	private final BooleanTypeElements pBooleanType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MSQLTypesGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pType = new TypeElements();
		this.pIntegerType = new IntegerTypeElements();
		this.pStringType = new StringTypeElements();
		this.pBooleanType = new BooleanTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.mdse.minisql.types.MSQLTypes".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Type:
	//	IntegerType | StringType | BooleanType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//IntegerType:
	//	"Int" {IntegerType};
	public IntegerTypeElements getIntegerTypeAccess() {
		return pIntegerType;
	}
	
	public ParserRule getIntegerTypeRule() {
		return getIntegerTypeAccess().getRule();
	}
	
	//StringType:
	//	"String" {StringType};
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}
	
	//BooleanType:
	//	"Bool" {BooleanType};
	public BooleanTypeElements getBooleanTypeAccess() {
		return pBooleanType;
	}
	
	public ParserRule getBooleanTypeRule() {
		return getBooleanTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
