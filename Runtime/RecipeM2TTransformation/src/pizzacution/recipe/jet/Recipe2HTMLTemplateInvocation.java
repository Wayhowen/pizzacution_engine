package pizzacution.recipe.jet;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import pizzacution.recipe.*;

public class Recipe2HTMLTemplateInvocation {
	private static final File input = new File("../PizzaMMTransfomation/Output/Pizza2Recipe.recipe");
	private static final File output = new File("./Output/Recipes.html");
	
	private static RecipesBook loadRecipesBook(File file) {
		// Stand-alone setup of Ecore:
		// "Touch" the package once to make sure its classes are loaded.
		RecipePackage.eINSTANCE.eClass();		
		
        // Register the XMI resource factory for the file extension
        Resource.Factory.Registry registry = Resource.Factory.Registry.INSTANCE;
        Map<String, Object> factoryMap = registry.getExtensionToFactoryMap();
        factoryMap.put("recipe", new XMIResourceFactoryImpl());

        
        // Loading of model:
        // Create a new resource set (collection of resources)
        ResourceSet resourceSet = new ResourceSetImpl();

        // Get a resource for the file
        URI uri = URI.createURI(file.getPath());
        Resource resource = resourceSet.getResource(uri, true);
        
        // Get the first model element and cast it to the right type
        return (RecipesBook) resource.getContents().get(0);
	}
	
	public static final void main(String[] args) throws IOException {
		//Manual invocation of the template generated by JET
		Recipe2HTMLTemplate template = new Recipe2HTMLTemplate();
		
		RecipesBook recipesBook = loadRecipesBook(input);
		
		String generatedContent = template.generate(recipesBook);
		
		Files.write(output.toPath(), generatedContent.getBytes());
	}
}
