modeltype MMRecipe uses "http://www.pizzacution.org/recipe";
modeltype MMPizza uses "http://www.example.org/schema";

transformation Pizza2Recipe(in source: MMPizza, out target: MMRecipe);

main() {
	source.rootObjects()[PizzaPlace] -> map PizzaPlace2RecipesBook();
}

mapping MMPizza::PizzaPlace :: PizzaPlace2RecipesBook() : MMRecipe::RecipesBook{
	placeName := self.name;
	recipe := self.pizzasAvailable -> map Pizza2Recipe();
}

mapping MMPizza::Pizza :: Pizza2Recipe() : MMRecipe::Recipe {
	recipeName := self.getPizzaName();
	basePreparation := self.map Pizza2Description();
	addToppings := self.map Topping2Description();
}

mapping MMPizza::Pizza :: Pizza2Description(): MMRecipe :: PrepareBase
	when {self.dough != null and self.sauce !=null;} {
		description := self.prepareDough() + " " + self.putSauce();		
}

mapping MMPizza::Pizza :: Topping2Description(): MMRecipe :: AddToppings 
	when{self.toppingReferences != null}{
	var tname: String;
	var temp: String;
	self.toppingReferences -> forEach(topping) {
		tname := topping.topping.name;
		temp := "Add " + tname + ", ";
		if(description != null){
			description := description.toString() + temp
		}else{
			description := temp
		}
	};
	 description := description + "and bake for 15 minutes at 250C";
	
}

helper MMPizza::NamedElement :: getPizzaName(): String {
	return "Recipe for Pizza " + self.name;
}

helper MMPizza::Pizza :: prepareDough(): String {
	return "Shape into a round the " + self.dough.toString() + " dough"; 
}

 helper MMPizza::Pizza :: putSauce(): String {
 	return "Add " + self.sauce.toString() + " sauce and place it on the dough";
 }
 
