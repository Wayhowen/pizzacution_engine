modeltype MMRecipe uses "http://www.pizzacution.org/recipe";
modeltype MMPizza uses "http://www.example.org/schema";

transformation Pizza2Recipe(in source: MMPizza, out target: MMRecipe);

main() {
	//source.rootObjects()[Pizza] -> map Pizza2Recipe();
	source.rootObjects()[PizzaPlace] -> map PizzaPlace2RecipesBook();
}

mapping MMPizza::PizzaPlace :: PizzaPlace2RecipesBook() : MMRecipe::RecipesBook{
	placeName := self.name;
	self.pizzasAvailable -> map Pizza2Recipe();
}

mapping MMPizza::Pizza :: Pizza2Recipe() : MMRecipe::Recipe {
	self.map Pizza2RecipeName();
	basePreparation := self.map Pizza2Description();
	addToppings := self.toppings -> map Topping2Description();
}

mapping MMPizza::Pizza :: Pizza2RecipeName(): MMRecipe :: Recipe {
	recipeName := self.getPizzaName();
}

mapping MMPizza::Pizza :: Pizza2Description(): MMRecipe :: PrepareBase
	when {self.dough != null and self.sauce !=null;} {
		description := self.prepareDough() + " " + self.putSauce();		
}

mapping MMPizza::Topping :: Topping2Description(): MMRecipe :: AddToppings 
	when{self.foodGroup != null}{
		description := "Add x amount of " + self.foodGroup.toString();
}


helper MMPizza::NamedElement :: getPizzaName(): String {
	return "Recipe for Pizza " + self.name;
}

helper MMPizza::Pizza :: prepareDough(): String {
	return "Get x amount of " + self.dough.toString() + " dough"; 
}

 helper MMPizza::Pizza :: putSauce(): String {
 	return "Take x amount of " + self.sauce.toString() + "sauce and place it on the dough";
 }
 
