// automatically generated by Xtext
grammar pizzacution.query.dsl.QueryLanguage with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.example.org/query" as query
//import "http://www.example.org/schema" as schema
// TODO: fix some problems with imports


// TODO: we need to enfore that all that clauses are different
SelectQuery returns query::SelectQuery: "I" "want" whatClause=WhatClause
	"that" thatClause+=ThatClause
;

WhatClause returns query::WhatClause: AllPizzas | SomePizzas;

AllPizzas returns query::AllPizzas: "all" "pizzas" {query::AllPizzas};

SomePizzas returns query::SomePizzas: "a" "pizza" {query::SomePizzas};

// TODO: we need to enforce statically, that two of the rules has to be different
ThatClause returns query::ThatClause: containsClause+=ContainsClause ("and" containsClause+=ContainsClause)?;

ContainsClause returns query::ContainsClause: HasClause | DoesntHaveClause;

HasClause returns query::HasClause: "has" ;

DoesntHaveClause returns query::DoesntHaveClause: "does" "not" "have" ;

//toppingReference+=ToppingReference ("," toppingReference+=ToppingReference)*

//ToppingReference returns query::ToppingReference: topping=[schema::Topping];

// TODO: why doesnt referencing work? 
// TODO: can I somehow reference pizzas by not only name but also sauce/dough without having them as separate models?

