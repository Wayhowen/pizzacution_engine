/*
 * generated by Xtext 2.26.0
 */
package pizzacution.schema.dsl.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import pizzacution.schema.PizzaPlace;
import pizzacution.schema.Size;
import pizzacution.schema.SizeReference;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */

public class LanguageScopeProvider extends AbstractLanguageScopeProvider {
	@Override
	public IScope getScope(EObject context, EReference reference) {
		// if it is the "what" reference of query
		if (context instanceof SizeReference) {
			// provide a custom scope
			SizeReference sizeInfoReference = (SizeReference) context;
			return getSizeInfoReferenceScope(sizeInfoReference);
		}
		
		return super.getScope(context, reference);
	}
	
	protected IScope getSizeInfoReferenceScope(SizeReference sizeInfoReference) {
		EObject rootModelElement = EcoreUtil.getRootContainer(sizeInfoReference);

		PizzaPlace pzplc = (PizzaPlace) rootModelElement;
		List<Size> sizeInfos = pzplc.getSizesAvailable();
		return Scopes.scopeFor(sizeInfos);
	}
}