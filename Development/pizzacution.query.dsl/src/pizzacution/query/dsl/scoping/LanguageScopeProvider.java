/*
 * generated by Xtext 2.26.0
 */
package pizzacution.query.dsl.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import pizzacution.query.PizzaPlaceReference;
import pizzacution.query.SelectQuery;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class LanguageScopeProvider extends AbstractLanguageScopeProvider {
//	@Override
//	public IScope getScope(EObject context, EReference reference) {
//		// if it is the "what" reference of query
//		if (context instanceof PizzaPlaceReference) {
//			// provide a custom scope
//			PizzaPlaceReference pizzaPlaceReference = (PizzaPlaceReference) context;
//			return Scopes.scopeFor(pizzaPlaceReference.getPizzaPlace());
////			return getPizzaPlaceReferenceScope(pizzaPlaceReference);
//		}
//		
//		return super.getScope(context, reference);
//	}
//	
//	protected IScope getPizzaPlaceReferenceScope(PizzaPlaceReference pizzaPlaceReference) {
//		// Get the root model element via reflection on the model
//		EObject rootModelElement = EcoreUtil.getRootContainer(pizzaPlaceReference);
//		
//		if (rootModelElement instanceof SelectQuery) {
//			// Find the table referenced in the select query's from clause
//			SelectQuery selectQuery = (SelectQuery) rootModelElement;
//			FromClause fromClause = selectQuery.getFromClause();
//			
//			Table table = fromClause.getTable();
//			List<Column> columns = table.getColumns();
//			
//			return Scopes.scopeFor(columns);
//		}
//		
//		return null;
//	}
}
